#!/usr/bin/env python3
from pssh.clients import ParallelSSHClient, SSHClient
import yaml, json
from jinja2 import Template

from argparse import ArgumentParser


parser = ArgumentParser(description="devops-pipeline")
parser.add_argument("--file", default="Deployfile")
args = parser.parse_args()

data = yaml.safe_load(open(args.file))

for machine in data["machines"]:
  count = machine.get("count", 1)
  for instance in range(0, count):
    template = Template(machine["name"])
    host = template.render(index=instance)
    for image in machine["images"]:
      client = ParallelSSHClient([host], user=machine["user"], pkey=machine["key"])
      image_check = client.run_command("sudo curl --unix-socket /var/run/docker.sock localhost/containers/json")
      loaded = json.loads(list(image_check[host]["stdout"])[0])
      already_running = False
      for running_image in loaded:
        if running_image["Image"] == image["name"]:
          print("Found image {} running on remote machine".format(image["name"]))
          already_running = True
      if already_running:
        continue
      docker_run = client.run_command("sudo docker run -d {}".format(image["name"]))
      print(list(docker_run[host]["stdout"]))
      client.join(docker_run)
